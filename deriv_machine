#lang racket
(define e (exp 1))
(define (variable? x) (symbol? x))
(define (same-variable? x1 x2)
  (and (variable? x1) (variable? x2) (eq? x1 x2)))
(define (same-number? x1 x2)
  (and (number? x1) (number? x2) (eq? x1 x2)))
(define (in x exp)
  (cond ((same-variable? x exp)
         #t)
        ((list? exp) (memq x exp)
         #t)
        (else #f)))
#|make structure|#
(define (make-sum x1 x2)
  (cond ((same-number? x1 0) x2)
        ((same-number? x2 0) x1)
        ((and (number? x1) (number? x2)) (+ x1 x2))
        ((same-variable? x1 x2) (make-product 2 x1))
        (else (list '+ x1 x2))))
(define (make-sub x1 x2)
  (cond ((same-number? x1 0) (- 0 x2))
        ((same-number? x2 0) x1)
        ((and (number? x1) (number? x2)) (- x1 x2))
        (else (list '- x1 x2))))
(define (make-product x1 x2)
  (cond ((or (same-number? x1 0) (same-number? x2 0)) 0)
        ((same-number? x1 1) x2)
        ((same-number? x2 1) x1)
        ((and (number? x1) (number? x2)) (* x1 x2))
        (else (list '* x1 x2))))
(define (make-exp x)
  (cond ((number? x) (exp x))
        (else (list 'exp x))))
(define (make-expt x1 x2)
  (cond ((and (number? x1) (number? x2))
         (expt x1 x2))
        (else (list 'expt x1 x2))))
(define (make-log x)
  (cond ((number? x)
         (log x))
        (else (list 'log x))))
#|recognise exp|#
#|+|#
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (augend x) (if (sum? x)
                       (cadr x)
                       (error "IS NOT ADDITION" x)))
(define (addend x) (if (sum? x)
                       (caddr x)
                       (error "IS NOT ADDITION" x)))
#|-|#
(define (sub? x) (and (pair? x) (eq? (car x) '-)))
(define (minuend x) (if (sub? x)
                        (cadr x)
                        (error "IS NOT SUBTRACTION" x)))
(define (subtrahend x) (if (sub? x)
                        (caddr x)
                        (error "IS NOT SUBTRACTION" x)))
#|*|#
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier x) (if (product? x)
                        (cadr x)
                        (error "IS NOT MULTIPLICATION" x)))
(define (multiplicand x) (if (product? x)
                        (caddr x)
                        (error "IS NOT MULTIPLICATION" x)))
#|EXP and EXPT|#
(define (exp? x) (and (pair? x) (eq? (car x) 'exp)))
(define (expt? x) (and (pair? x) (eq? (car x) 'expt)))
(define (exponent x) (cond ((exp? x) (cadr x))
                           ((expt? x) (caddr x))
                           (else (error "IS NOT POWER" x))))
(define (base x) (cond ((exp? x) (make-exp 1)) 
                       ((expt? x) (cadr x))
                       (else (error "IS NOT POWER" x))))
#|LOG|#
(define (log? x) (and (pair? x) (eq? (car x) 'log)))
(define (log-num x) (if (log? x)
                        (cadr x)
                        (error "IS NOT LOG" x)))
#|Differentiation|#
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (augend exp) var)
                   (deriv (addend exp) var)))
        ((sub? exp)
         (make-sub (deriv (minuend exp) var)
                   (deriv (subtrahend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))))
        #|Power|#
        ((and (and (expt? exp)
                   (in var (base exp)))
              (not (in var (exponent exp))))
         (cond ((same-number? (exponent exp) 0) 0)
               ((same-variable? (exponent exp) var)
                (error "NOT EDITTED"))
               (else (make-product
                      (make-product
                       (make-sub (exponent exp) 1)
                      exp)
                      (deriv (base exp) var)))))     
        #|Normal exp|#
        ((exp? exp)
         (cond ((number? (exponent exp)) 0)
               (else (make-product
                      (deriv (exponent exp) var)
                      exp))))
        #|Exponential|#
        ((and (expt? exp)
              (or (number? (base exp))
                  (and (variable? (base exp))
                       (not (same-variable? (base exp)
                                            var)))))
         (cond ((number? (exponent exp)) 0)
               (else
                (make-product
                 (make-log (base exp))
                 (make-product
                  (deriv (exponent exp) var)
                  exp)))))
        #|Log not finished|#
        ((log? exp)
         (cond ((number? (log-num exp))
                (and (variable? (log-num exp))
                     (not (same-variable? (log-num exp)
                                           var)))
               0)
               (else 0)))  
        (else
         (error "UNKOWN TYPE" exp))))


#|example|#
(deriv '(* y y) 'y)
(deriv '(+ (* xx xx) xx) 'xx)
(deriv '(exp (* 2 x)) 'x)